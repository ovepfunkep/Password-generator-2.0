// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PwdGenDAL;

#nullable disable

namespace PwdGenDAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("PwdGenDAL.Models.Encryption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Encryptions", t =>
                        {
                            t.HasCheckConstraint("CHK_Encryption_Name_MaxLength", "LENGTH(Name) <= 100");
                        });
                });

            modelBuilder.Entity("PwdGenDAL.Models.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Keys", t =>
                        {
                            t.HasCheckConstraint("CHK_Key_Value_MaxLength", "LENGTH(Value) <= 100");
                        });
                });

            modelBuilder.Entity("PwdGenDAL.Models.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("PasswordHistories", t =>
                        {
                            t.HasCheckConstraint("CHK_PasswordHistory_SourceText_MaxLength", "LENGTH(SourceText) <= 100");
                        });
                });

            modelBuilder.Entity("PwdGenDAL.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PasswordHistoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PasswordHistoryId");

                    b.ToTable("Platforms", t =>
                        {
                            t.HasCheckConstraint("CHK_Platform_Name_MaxLength", "LENGTH(Name) <= 100");
                        });
                });

            modelBuilder.Entity("PwdGenDAL.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("EncryptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("EncryptionId", "KeyId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("PwdGenDAL.Models.PasswordHistory", b =>
                {
                    b.HasOne("PwdGenDAL.Models.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("PwdGenDAL.Models.Platform", b =>
                {
                    b.HasOne("PwdGenDAL.Models.PasswordHistory", "PasswordHistory")
                        .WithMany()
                        .HasForeignKey("PasswordHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordHistory");
                });

            modelBuilder.Entity("PwdGenDAL.Models.Settings", b =>
                {
                    b.HasOne("PwdGenDAL.Models.Encryption", "Encryption")
                        .WithMany()
                        .HasForeignKey("EncryptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PwdGenDAL.Models.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encryption");

                    b.Navigation("Key");
                });
#pragma warning restore 612, 618
        }
    }
}
